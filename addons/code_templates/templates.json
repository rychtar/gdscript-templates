{
	"class": "class_name {0}\nextends {1}\n\n|CURSOR|",
	"export": "@export var {0}: {1}|CURSOR|",
	"exprange": "@export_range({0}, {1}) var {2}: {3} = |CURSOR|",
	"expnode": "@export var {0}: {1} = |CURSOR|",
	"expfile": "@export_file var {0}: String = \"|CURSOR|\"",
	"onready": "@onready var {0}: {1} = ${2}|CURSOR|",
	"onrget": "@onready var {0}: {1} = get_node(\"{2}\")|CURSOR|",
	
	"ready": "func _ready() -> void:\n\t|CURSOR|",
	"process": "func _process(delta: float) -> void:\n\t|CURSOR|",
	"physics": "func _physics_process(delta: float) -> void:\n\t|CURSOR|",
	"input": "func _input(event: InputEvent) -> void:\n\t|CURSOR|",
	"uninput": "func _unhandled_input(event: InputEvent) -> void:\n\t|CURSOR|",
	"draw": "func _draw() -> void:\n\t|CURSOR|",
	"enter": "func _enter_tree() -> void:\n\t|CURSOR|",
	"exit": "func _exit_tree() -> void:\n\t|CURSOR|",
	"notif": "func _notification(what: int) -> void:\n\tmatch what:\n\t\t|CURSOR|",
	
	"func": "func {0}({1}) -> {2}:\n\t|CURSOR|",
	"fv": "func {0}() -> void:\n\t|CURSOR|",
	"static": "static func {0}({1}) -> {2}:\n\t|CURSOR|",
	
	"signal": "signal {0}({1})|CURSOR|",
	"sigcon": "{0}.connect(_on_{0})|CURSOR|",
	"sigem": "{0}.emit({1})|CURSOR|",
	"ondis": "{0}.disconnect(_on_{0})|CURSOR|",
	
	"prop": "var {0}: {1}:\n\tget:\n\t\treturn {0}\n\tset(value):\n\t\t{0} = value\n\t\t|CURSOR|",
	"propget": "var {0}: {1}:\n\tget:\n\t\treturn |CURSOR|",
	"propset": "var {0}: {1}:\n\tset(value):\n\t\t|CURSOR|",
	
	"if": "if {0}:\n\t|CURSOR|",
	"ifel": "if {0}:\n\t|CURSOR|\nelse:\n\t",
	"elif": "elif {0}:\n\t|CURSOR|",
	"for": "for {0} in {1}:\n\t|CURSOR|",
	"fori": "for i in range({0}):\n\t|CURSOR|",
	"while": "while {0}:\n\t|CURSOR|",
	"match": "match {0}:\n\t{1}:\n\t\t|CURSOR|\n\t_:\n\t\tpass",
	
	"isnull": "if {0} != null:\n\t|CURSOR|",
	"isval": "if is_instance_valid({0}):\n\t|CURSOR|",
	"guard": "if not {0}:\n\treturn|CURSOR|",
	"assert": "assert({0}, \"{1}\")|CURSOR|",
	
	"ia": "Input.is_action_pressed(\"{0}\")|CURSOR|",
	"iaj": "Input.is_action_just_pressed(\"{0}\")|CURSOR|",
	"iar": "Input.is_action_just_released(\"{0}\")|CURSOR|",
	"iak": "Input.is_key_pressed(KEY_{0})|CURSOR|",
	"ims": "Input.is_mouse_button_pressed(MOUSE_BUTTON_{0})|CURSOR|",
	
	"dict": "var {0}: Dictionary = {\n\t\"{1}\": |CURSOR|\n}",
	"dictempty": "var {0}: Dictionary = {}|CURSOR|",
	"dicthas": "if {0}.has(\"{1}\"):\n\t|CURSOR|",
	"dictget": "{0}.get(\"{1}\", {2})|CURSOR|",
	"dictkeys": "for key in {0}.keys():\n\t|CURSOR|",
	"dictvals": "for value in {0}.values():\n\t|CURSOR|",
	"dictitems": "for key in {0}:\n\tvar value = {0}[key]\n\t|CURSOR|",
	"dictmerge": "{0}.merge({1}, true)|CURSOR|",
	"dictdup": "var {0} = {1}.duplicate(true)|CURSOR|",
	"dicterase": "{0}.erase(\"{1}\")|CURSOR|",
	"dictclear": "{0}.clear()|CURSOR|",
	
	"addch": "add_child({0})|CURSOR|",
	"remch": "remove_child({0})|CURSOR|",
	"qfree": "queue_free()|CURSOR|",
	"getnode": "get_node(\"{0}\")|CURSOR|",
	"hasnode": "has_node(\"{0}\")|CURSOR|",
	"findch": "find_child(\"{0}\", true, false)|CURSOR|",
	"gettree": "get_tree()|CURSOR|",
	"getparent": "get_parent()|CURSOR|",
	"getchildren": "get_children()|CURSOR|",
	
	"inst": "var {0} = {1}.instantiate()\n|CURSOR|",
	"load": "var {0} = load(\"{1}\")|CURSOR|",
	"preload": "const {0} = preload(\"{1}\")|CURSOR|",
	
	"timer": "await get_tree().create_timer({0}).timeout\n|CURSOR|",
	"calldef": "call_deferred(\"{0}\", {1})|CURSOR|",
	"setdef": "set_deferred(\"{0}\", {1})|CURSOR|",
	
	"tween": "var tween = create_tween()\ntween.tween_property({0}, \"{1}\", {2}, {3})\n|CURSOR|",
	"tweencb": "var tween = create_tween()\ntween.tween_callback({0})\n|CURSOR|",
	"tweenpar": "var tween = create_tween().set_parallel()\ntween.tween_property({0}, \"{1}\", {2}, {3})\ntween.tween_property({0}, \"{4}\", {5}, {6})\n|CURSOR|",
	
	"print": "print({0})|CURSOR|",
	"printerr": "push_error({0})|CURSOR|",
	"printwarn": "push_warning({0})|CURSOR|",
	"printd": "print(\"{0}: \", {0})|CURSOR|",
	
	"todo": "# TODO: |CURSOR|",
	"fixme": "# FIXME: |CURSOR|",
	"note": "# NOTE: |CURSOR|",
	
	"region": "#region {0}\n|CURSOR|\n#endregion",
	
	"vec2": "Vector2({0}, {1})|CURSOR|",
	"vec2z": "Vector2.ZERO|CURSOR|",
	"vec3": "Vector3({0}, {1}, {2})|CURSOR|",
	"vec3z": "Vector3.ZERO|CURSOR|",
	"color": "Color({0}, {1}, {2})|CURSOR|",
	"rect2": "Rect2({0}, {1}, {2}, {3})|CURSOR|",
	
	"enum": "enum {0} {\n\t{1},\n\t|CURSOR|\n}",
	"const": "const {0}: {1} = |CURSOR|",
	"array": "var {0}: Array[{1}] = []|CURSOR|",
	
	"collbody": "func _on_body_entered(body: Node2D) -> void:\n\t|CURSOR|",
	"collarea": "func _on_area_entered(area: Area2D) -> void:\n\t|CURSOR|",
	"timeout": "func _on_timeout() -> void:\n\t|CURSOR|",
	"pressed": "func _on_pressed() -> void:\n\t|CURSOR|",
	
	"randf": "randf_range({0}, {1})|CURSOR|",
	"randi": "randi_range({0}, {1})|CURSOR|",
	"clamp": "clamp({0}, {1}, {2})|CURSOR|",
	"lerp": "lerp({0}, {1}, {2})|CURSOR|",
	"movetoward": "move_toward({0}, {1}, {2})|CURSOR|"
}
